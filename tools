#!/usr/bin/env -S guile2.2 --no-auto-compile
-*- mode: scheme; -*-
!#

;;; Comment:
;;
;; I think writing in Guile (Scheme) is good way
;; to learn this language. I really love this syntax.
;; It is so powerfull language. And I learning it
;; when writing this tooling script.
;;
;;; Code:

;; Check command line argument
(define cur-arg 1)
(define (arg? arg) (string= (list-ref (command-line) cur-arg) arg))

;; Variables
(define substitutes
  (string-append
   "https://bordeaux.guix.gnu.org "
   "https://substitutes.nonguix.org"))

;; Custom Guix command.
;; 1. Specify channels
;; 2. Specify load path
;; 3. Specify substitute urls
(define (guix args)
  (system
   (string-append
    "guix "
    "time-machine "
    "-C "
    "channels.scm "
    "-- "
    (car args)
    " -L ./scheme "
    (string-join
     (cdr args)
     " ")
    (string-append
     " --substitute-urls="
     "\""
     substitutes
     "\""))))

;; TODO: Macro for defining commands.
;; Macro which add command, and formatted help message for it

(define (main)
  (if (> (length (command-line)) cur-arg)
      (cond ((arg? "home")
	     (guix '("home"
		     "reconfigure"
		     "home.scm")))
	    ((arg? "help")
	     (display
	      (string-append
	       "\t--main-substitute   Use `https://ci.guix.gnu.org' substitute\n")))
	    ((arg? "--main-substitute")
	     (set! cur-arg (1+ cur-arg))
	     (set! substitutes (string-append
				"https://ci.guix.gnu.org "
				substitutes))
	     (main))
	    (else
	     (display (string-append "Undefined argument: `" (list-ref (command-line) cur-arg) "'\n"))))
      (display "`tools' require arguments\n")))

(main)
